sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
wb <- createWorkbook()
prob <- post_prob |> distinct(prob)
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
prob1
excel_out(prob1)
rlang::last_error()
prob1
post_prob |> distinct(prob)
prob1 |> distinct(prob)
prob1 |> distinct(prob) |> pull()
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
prob1
excel_out(prob1)
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
saveWorkbook(wb, file, overwrite = TRUE)
}
excel_out(prob1)
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
excel_out(prob1)
post_prob
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
excel_out(prob1)
post_prob <- prob1
post_prob1
post_prob
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
excel_out(prob1)
x <- 1
y <- 30
z <- 20
h <- function() {
y <- 2
z <- 3
i()
i <- function() {
z <- 3
c(x, y, z)
}
}
h()
rm(x, h)
x <- 1
y <- 30
z <- 20
h <- function() {
y <- 2
z <- 3
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
x <- 1
y <- 30
z <- 20
h <- function() {
y <- 2
z <- 3
i()
}
i <- function() {
z <- 3
c(x, y, z)
}
h()
rm(x, h)
y
rm(y)
x <- 1
#y <- 30
z <- 20
h <- function() {
y <- 2
z <- 3
i()
}
i <- function() {
z <- 3
c(x, y, z)
}
h()
excel_out(prob1)
excel_out <- function(post_prob, file="post_prob.xlsx") {
options(openxlsx.numFmt = "0.000")
rename.vec <- c(N="n", "No. of Responders"="res", "Posterior Probability of Success"="post_prob")
my_style1 <- createStyle(wrapText = TRUE)
my_style2 <- createStyle(wrapText = TRUE, textDecoration = "Bold")
sheet_out <- function(prob1) {
post_prob <- post_prob |> filter(prob==prob1) |> select(!prob) |> rename(all_of(rename.vec))
sheet_name <- paste("P = ", prob1, sep="")
addWorksheet(wb, sheetName = sheet_name)
freezePane(wb, sheet = sheet_name, firstRow = TRUE)
writeDataTable(wb, sheet_name, x = post_prob, colNames = TRUE, tableStyle = "TableStyleLight9")
addStyle(wb, sheet_name, my_style1, rows=1, cols = 1:6, gridExpand = TRUE)
addStyle(wb, sheet_name, my_style2, rows=1, cols = 6)
setColWidths(wb, sheet_name, cols = 1:6,  widths = c(15,15,15,25,30,40))
mytext1 <- paste("Number of Responders such that: \n",
"Assumes a non-informative Beta(1,1) prior for success.",sep="")
mytext2 <- paste("Prob (Posterior Probability > ",rate,") >= ", prob1, "\n\n")
writeData(wb, sheet_name, mytext1, startCol = 5, startRow = 1)
writeData(wb, sheet_name, mytext2, startCol = 6, startRow = 1)
}
wb <- createWorkbook()
prob <- post_prob |> distinct(prob) |> pull()
walk(prob,\(x) sheet_out(x))
saveWorkbook(wb, file, overwrite = TRUE)
}
excel_out(prob1)
num <- 80
rate <- 0.3
prob <- seq(0.5,0.8,0.1)
prob2 <- expand_grid(prob,num)
prob2
prob2 <- expand_grid(prob,1:num)
prob2
View(prob2)
num
y <- 1:num
y
prob2
rate
rm(rate0)
rm(rate)
calc_post <- function(num,rate,prob){
prob2 <- expand_grid(prob,1:num)
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob
}
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
calc_post(80,0.3,0.8)
calc_post <- function(num,rate,prob){
prob2 <- expand_grid(prob,1:num)
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob
}
calc_post(80,0.3,0.8)
prob2
?expand_grid
num
prob2 <- expand_grid(prob,num=1:num)
prob2
View(prob2)
rate
prob2 <- expand_grid(prob,num=1:num)
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
calc_post <- function(num,rate,prob){
prob2 <- expand_grid(prob,num=1:num)
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob
}
calc_post(80,0.3,0.8)
calc_post <- function(num,rate,prob){
prob2 <- expand_grid(prob,num=1:num)
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob
}
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
rate
calc_post(80,0.3,0.8)
calc_post <- function(num,rate,prob){
prob2 <- expand_grid(prob,num=1:num)
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
post_prob <- list_rbind(map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob
}
calc_post(80,0.3,0.8)
?expand_grid
?pbeta
q()
library(devrools)
library(devtools)
library(tidyverse)
load_all()
?tibble
?expand_grid
?tibble
?expand_grid
?list_rbind
?options
?openxlsx.numFmt
?openxlsx
openxlsx
options(openxlsx.numFmt = "0.000")
options(openxlsx::openxlsx.numFmt = "0.000")
options(openxlsx::openxlsx.numFmt = "0.000")
openxlsx_getOp()
library(openxlsx)
openxlsx_getOp()
openxlsx_getOp("numFmt")
openxlsx::openxlsx_setOp("numFmt","0.000")
openxlsx_setOp("numFmt")
openxlsx_getOp("numFmt")
?filter
q()
q()
library(devtools)
library*tidyverse)
library(tidyverse)
load_all()
?dsitinct
?distinct
?pull
?walk
usethis::use_package("dplyr", "openxlsx", "purrr")
?use_package
usethis::use_package("dplyr")
usethis::use_package("openxlsx")
usethis::use_package("purrr")
usethis::use_package("tibble")
usethis::use_package("tidyr")
load_all()
load_all()
document()
load_all()
document()
check()
check()
?map2
use_test("post_prob")
load_all()
check()
?rename
load_all()
check()
?select
load_all()
check()
post_prob <- calc_post(80,0.3,0.8)
post_prob
post_prob <- calc_post(80,0.3,c(0.7,0.8))
post_prob
View(post_prob)
?add_column
calc_post <- function(num,rate,prob){
prob2 <- tidyr::expand_grid(prob,num=1:num)
calc_prob <- function(prob, num) {
y <- 1:num
shape1 <- 1+y
shape2 <- 1+num-y
post_prob <- stats::pbeta(rate, shape1, shape2, lower.tail = FALSE)
ind <- which(post_prob>=prob)[1]
probout <- NULL
if(!is.na(ind)) probout <- tibble::tibble(n=num, prob=prob, res=ind, post_prob=post_prob[ind])
probout
}
post_prob <- purrr::list_rbind(purrr::map2(prob2[["prob"]], prob2[["num"]], \(x,y) calc_prob(x,y)))
post_prob |> tibble::add_column(rate=rate, .before="post_prob")
}
post_prob <- calc_post(80,0.3,0.8)
post_prob
?pull
post_prob
post_prob |> dplyr::distinct(prob) |> dplyr::pull()
post_prob |> dplyr::distinct(rate) |> dplyr::pull()
post_prob |> dplyr::distinct(prob,rate)
post_prob <- calc_post(80,0.3,c(0.7,0.8))
post_prob
post_prob
post_prob |> dplyr::distinct(prob,rate)
post_prob |> dplyr::distinct(prob,rate) |> dplyr::pull()
post_prob |> dplyr::distinct(prob,rate) |> dplyr::pull(distinct)
post_prob |> dplyr::distinct(prob,rate) |> dplyr::pull(distinct())
post_prob |> dplyr::distinct(prob,rate) |> dplyr::pull(.unique)
load_all()
load_all()
calc_post
rm(list = c("calc_post"))
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
?all_of
?rename
?all_of
tidyr::all_of
dplyr::all_of
survival::all_of
load_all()
check()
usethis::use_package("tidyselect")
load_all(0)
load_all()
check()
usethis::edit_r_environ()
q()
library(devtools)
library(tidyverse)
load_all()
check()
load_all()
load_all()
check()
q()
q()
library(tidyverse)
library(devtools)
load_all()
check()
install()
install.packages(c("blob", "boot", "broom", "class", "cli", "codetools", "commonmark", "dbplyr", "dplyr", "dtplyr", "foreign", "ggplot2", "googledrive", "googlesheets4", "gtable", "hms", "htmltools", "htmlwidgets", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "openssl", "ps", "rlang", "rmarkdown", "spatial", "survival", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "boot", "broom", "class", "cli", "codetools", "commonmark", "dbplyr", "dplyr", "dtplyr", "foreign", "ggplot2", "googledrive", "googlesheets4", "gtable", "hms", "htmltools", "htmlwidgets", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "openssl", "ps", "rlang", "rmarkdown", "spatial", "survival", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "boot", "broom", "class", "cli", "codetools", "commonmark", "dbplyr", "dplyr", "dtplyr", "foreign", "ggplot2", "googledrive", "googlesheets4", "gtable", "hms", "htmltools", "htmlwidgets", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "openssl", "ps", "rlang", "rmarkdown", "spatial", "survival", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "boot", "broom", "class", "cli", "codetools", "commonmark", "dbplyr", "dplyr", "dtplyr", "foreign", "ggplot2", "googledrive", "googlesheets4", "gtable", "hms", "htmltools", "htmlwidgets", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "openssl", "ps", "rlang", "rmarkdown", "spatial", "survival", "testthat", "tibble", "vctrs", "xfun"))
q()
library(p.post)
?calc_post
p1 <- 0.3
p2 <- seq(0.5,0.8,0.1)
post_prob <- calc_post(80, p1, p2)
post_prob
excel_out(post_prob)
?select
load_all()
library(tidyverse)
q()
